/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.palantir.gradle.conjure.ExtractExecutableTask

sourceSets {
    integrationInput
    test {
        compileClasspath += integrationInput.output
        runtimeClasspath += integrationInput.output
    }
}

configurations {
    conjureCompiler
}

idea {
    module {
        testSourceDirs += sourceSets.integrationInput.java.srcDirs
    }
}

tasks.checkstyleIntegrationInput.enabled = false

dependencies {
    compile project(':conjure-lib')
    compile 'com.palantir.ri:resource-identifier'
    compile 'com.palantir.tokens:auth-tokens'
    compile 'com.palantir.remoting-api:errors'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    compile 'com.google.googlejavaformat:google-java-format'
    compile 'com.palantir.syntactic-paths:syntactic-paths'
    compile 'com.google.guava:guava'
    compile 'com.squareup:javapoet'
    compile 'javax.validation:validation-api'
    compile 'org.apache.commons:commons-lang3'
    compile 'org.slf4j:slf4j-api'

    conjureCompiler 'com.palantir.conjure:conjure'

    testCompile 'com.palantir.remoting3:jackson-support'
    testCompile 'junit:junit'
    testCompile 'org.assertj:assertj-core'
    testCompile 'org.mockito:mockito-core'
    testCompile 'com.palantir.remoting3:jaxrs-clients'
    testCompile 'com.palantir.remoting3:retrofit2-clients'
    testCompile 'io.dropwizard:dropwizard-testing'

    integrationInputCompile project(':conjure-lib')
    integrationInputCompile 'com.squareup.retrofit2:retrofit'
    integrationInputCompile 'javax.ws.rs:javax.ws.rs-api'
    integrationInputCompile 'com.palantir.remoting-api:errors'
    integrationInputCompile 'javax.validation:validation-api'

    processor 'org.immutables:value'
}

task extractConjureCompiler(type: ExtractExecutableTask) {
    archive = configurations.conjureCompiler
    outputDirectory = file("$buildDir/conjure-compiler")
    executableName = "conjure"
}

task compileIr(dependsOn: 'extractConjureCompiler') {
    def inputFiles = sourceSets.test.resources.matching { include '*.yml' }
    ext.outputDir = file("$buildDir/ir")
    inputs.files inputFiles
    outputs.dir outputDir

    doLast {
        inputFiles.forEach { f ->
            def outputFileName = f.name.take(f.name.lastIndexOf(".")) + ".conjure.json"
            def outputFile = file("$outputDir/$outputFileName")

            exec { execSpec ->
                def args = [
                        extractConjureCompiler.executable.absolutePath,
                        "compile",
                        f.absolutePath, // turns out, the input can be a file too
                        outputFile.absolutePath,
                ]
                logger.info("Running compiler with args: {}", args)
                execSpec.commandLine(args.toArray())
            }
        }
    }
}

tasks.processTestResources.dependsOn 'compileIr'

sourceSets {
    test {
        resources {
            srcDir tasks.compileIr.outputDir
        }
    }
}
