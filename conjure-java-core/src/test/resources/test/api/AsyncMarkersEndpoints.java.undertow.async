package test.api;

import com.google.common.util.concurrent.ListenableFuture;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.ReturnValueWriter;
import com.palantir.conjure.java.undertow.lib.Serializer;
import com.palantir.conjure.java.undertow.lib.TypeMarker;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.conjure.java.undertow.lib.UndertowService;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;
import io.undertow.util.Methods;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.UndertowServiceHandlerGenerator")
public final class AsyncMarkersEndpoints implements UndertowService {
    private final AsyncMarkers delegate;

    private AsyncMarkersEndpoints(AsyncMarkers delegate) {
        this.delegate = delegate;
    }

    public static UndertowService of(AsyncMarkers delegate) {
        return new AsyncMarkersEndpoints(delegate);
    }

    @Override
    public List<Endpoint> endpoints(UndertowRuntime runtime) {
        return Collections.unmodifiableList(
                Arrays.asList(new AsyncEndpoint(runtime, delegate), new SyncEndpoint(runtime, delegate)));
    }

    private static final class AsyncEndpoint implements HttpHandler, Endpoint, ReturnValueWriter<String> {
        private final UndertowRuntime runtime;

        private final AsyncMarkers delegate;

        private final Serializer<String> serializer;

        AsyncEndpoint(UndertowRuntime runtime, AsyncMarkers delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.serializer = runtime.bodySerDe().serializer(new TypeMarker<String>() {});
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws IOException {
            ListenableFuture<String> result = delegate.async();
            runtime.async().register(result, this, exchange);
        }

        @Override
        public void write(String result, HttpServerExchange exchange) throws IOException {
            serializer.serialize(result, exchange);
        }

        @Override
        public HttpString method() {
            return Methods.GET;
        }

        @Override
        public String template() {
            return "/async";
        }

        @Override
        public String serviceName() {
            return "AsyncMarkers";
        }

        @Override
        public String name() {
            return "async";
        }

        @Override
        public HttpHandler handler() {
            return this;
        }
    }

    private static final class SyncEndpoint implements HttpHandler, Endpoint {
        private final UndertowRuntime runtime;

        private final AsyncMarkers delegate;

        private final Serializer<String> serializer;

        SyncEndpoint(UndertowRuntime runtime, AsyncMarkers delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.serializer = runtime.bodySerDe().serializer(new TypeMarker<String>() {});
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws IOException {
            String result = delegate.sync();
            serializer.serialize(result, exchange);
        }

        @Override
        public HttpString method() {
            return Methods.GET;
        }

        @Override
        public String template() {
            return "/sync";
        }

        @Override
        public String serviceName() {
            return "AsyncMarkers";
        }

        @Override
        public String name() {
            return "sync";
        }

        @Override
        public HttpHandler handler() {
            return this;
        }
    }
}
