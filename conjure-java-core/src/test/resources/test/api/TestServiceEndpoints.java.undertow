package com.palantir.another;

import com.google.common.reflect.TypeToken;
import com.palantir.conjure.java.undertow.lib.BinaryResponseBody;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.EndpointRegistry;
import com.palantir.conjure.java.undertow.lib.Service;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.product.AliasedString;
import com.palantir.product.CreateDatasetRequest;
import com.palantir.product.NestedAliasedBinary;
import com.palantir.product.datasets.BackingFileSystem;
import com.palantir.product.datasets.Dataset;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HeaderMap;
import io.undertow.util.PathTemplateMatch;
import io.undertow.util.StatusCodes;
import java.io.IOException;
import java.io.InputStream;
import java.util.Deque;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.Set;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.UndertowServiceHandlerGenerator")
public final class TestServiceEndpoints implements Service {
    private final TestService delegate;

    private TestServiceEndpoints(TestService delegate) {
        this.delegate = delegate;
    }

    public static Service of(TestService delegate) {
        return new TestServiceEndpoints(delegate);
    }

    @Override
    public void register(UndertowRuntime runtime, EndpointRegistry registry) {
        new TestServiceRegistrable(runtime, delegate).register(registry);
    }

    private static final class TestServiceRegistrable {
        private final TestService delegate;

        private final UndertowRuntime runtime;

        private TestServiceRegistrable(UndertowRuntime runtime, TestService delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
        }

        void register(EndpointRegistry registry) {
            registry.add(
                    Endpoint.get("/catalog/fileSystems", "TestService", "getFileSystems"),
                    new GetFileSystemsHandler());
            registry.add(
                    Endpoint.post("/catalog/datasets", "TestService", "createDataset"),
                    new CreateDatasetHandler());
            registry.add(
                    Endpoint.get("/catalog/datasets/{datasetRid}", "TestService", "getDataset"),
                    new GetDatasetHandler());
            registry.add(
                    Endpoint.get("/catalog/datasets/{datasetRid}/raw", "TestService", "getRawData"),
                    new GetRawDataHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/raw-aliased",
                            "TestService",
                            "getAliasedRawData"),
                    new GetAliasedRawDataHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/raw-maybe",
                            "TestService",
                            "maybeGetRawData"),
                    new MaybeGetRawDataHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/string-aliased",
                            "TestService",
                            "getAliasedString"),
                    new GetAliasedStringHandler());
            registry.add(
                    Endpoint.post("/catalog/datasets/upload-raw", "TestService", "uploadRawData"),
                    new UploadRawDataHandler());
            registry.add(
                    Endpoint.post(
                            "/catalog/datasets/upload-raw-aliased",
                            "TestService",
                            "uploadAliasedRawData"),
                    new UploadAliasedRawDataHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/branches",
                            "TestService",
                            "getBranches"),
                    new GetBranchesHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/branchesDeprecated",
                            "TestService",
                            "getBranchesDeprecated"),
                    new GetBranchesDeprecatedHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/branches/{branch:.+}/resolve",
                            "TestService",
                            "resolveBranch"),
                    new ResolveBranchHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/datasets/{datasetRid}/testParam", "TestService", "testParam"),
                    new TestParamHandler());
            registry.add(
                    Endpoint.post("/catalog/test-query-params", "TestService", "testQueryParams"),
                    new TestQueryParamsHandler());
            registry.add(
                    Endpoint.post(
                            "/catalog/test-no-response-query-params",
                            "TestService",
                            "testNoResponseQueryParams"),
                    new TestNoResponseQueryParamsHandler());
            registry.add(
                    Endpoint.get("/catalog/boolean", "TestService", "testBoolean"),
                    new TestBooleanHandler());
            registry.add(
                    Endpoint.get("/catalog/double", "TestService", "testDouble"),
                    new TestDoubleHandler());
            registry.add(
                    Endpoint.get("/catalog/integer", "TestService", "testInteger"),
                    new TestIntegerHandler());
            registry.add(
                    Endpoint.post("/catalog/optional", "TestService", "testPostOptional"),
                    new TestPostOptionalHandler());
            registry.add(
                    Endpoint.get(
                            "/catalog/optional-integer-double",
                            "TestService",
                            "testOptionalIntegerAndDouble"),
                    new TestOptionalIntegerAndDoubleHandler());
        }

        private class GetFileSystemsHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, BackingFileSystem> result = delegate.getFileSystems(authHeader);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class CreateDatasetHandler implements HttpHandler {
            private final TypeToken<CreateDatasetRequest> requestType =
                    new TypeToken<CreateDatasetRequest>() {};

            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                CreateDatasetRequest request = runtime.serde().deserialize(requestType, exchange);
                HeaderMap headerParams = exchange.getRequestHeaders();
                String testHeaderArg =
                        runtime.serde().deserializeString(headerParams.get("Test-Header"));
                Dataset result = delegate.createDataset(authHeader, testHeaderArg, request);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class GetDatasetHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                Optional<Dataset> result = delegate.getDataset(authHeader, datasetRid);
                if (result.isPresent()) {
                    runtime.serde().serialize(result, exchange);
                } else {
                    exchange.setStatusCode(StatusCodes.NO_CONTENT);
                }
            }
        }

        private class GetRawDataHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                BinaryResponseBody result = delegate.getRawData(authHeader, datasetRid);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class GetAliasedRawDataHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                NestedAliasedBinary result = delegate.getAliasedRawData(authHeader, datasetRid);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class MaybeGetRawDataHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                Optional<BinaryResponseBody> result =
                        delegate.maybeGetRawData(authHeader, datasetRid);
                if (result.isPresent()) {
                    runtime.serde().serialize(result.get(), exchange);
                } else {
                    exchange.setStatusCode(StatusCodes.NO_CONTENT);
                }
            }
        }

        private class GetAliasedStringHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                AliasedString result = delegate.getAliasedString(authHeader, datasetRid);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class UploadRawDataHandler implements HttpHandler {
            private final TypeToken<InputStream> inputType = new TypeToken<InputStream>() {};

            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                InputStream input = runtime.serde().deserializeInputStream(exchange);
                delegate.uploadRawData(authHeader, input);
                exchange.setStatusCode(StatusCodes.NO_CONTENT);
            }
        }

        private class UploadAliasedRawDataHandler implements HttpHandler {
            private final TypeToken<NestedAliasedBinary> inputType =
                    new TypeToken<NestedAliasedBinary>() {};

            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                NestedAliasedBinary input = runtime.serde().deserialize(inputType, exchange);
                delegate.uploadAliasedRawData(authHeader, input);
                exchange.setStatusCode(StatusCodes.NO_CONTENT);
            }
        }

        private class GetBranchesHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                Set<String> result = delegate.getBranches(authHeader, datasetRid);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class GetBranchesDeprecatedHandler implements HttpHandler {
            @Override
            @SuppressWarnings("deprecation")
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                Set<String> result = delegate.getBranchesDeprecated(authHeader, datasetRid);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class ResolveBranchHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                String branch = runtime.serde().deserializeString(pathParams.get("branch"));
                Optional<String> result = delegate.resolveBranch(authHeader, datasetRid, branch);
                if (result.isPresent()) {
                    runtime.serde().serialize(result, exchange);
                } else {
                    exchange.setStatusCode(StatusCodes.NO_CONTENT);
                }
            }
        }

        private class TestParamHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, String> pathParams =
                        exchange.getAttachment(PathTemplateMatch.ATTACHMENT_KEY).getParameters();
                ResourceIdentifier datasetRid =
                        runtime.serde().deserializeRid(pathParams.get("datasetRid"));
                Optional<String> result = delegate.testParam(authHeader, datasetRid);
                if (result.isPresent()) {
                    runtime.serde().serialize(result, exchange);
                } else {
                    exchange.setStatusCode(StatusCodes.NO_CONTENT);
                }
            }
        }

        private class TestQueryParamsHandler implements HttpHandler {
            private final TypeToken<String> queryType = new TypeToken<String>() {};

            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                String query = runtime.serde().deserialize(queryType, exchange);
                Map<String, Deque<String>> queryParams = exchange.getQueryParameters();
                ResourceIdentifier something =
                        runtime.serde().deserializeRid(queryParams.get("different"));
                Optional<ResourceIdentifier> optionalMiddle =
                        runtime.serde().deserializeOptionalRid(queryParams.get("optionalMiddle"));
                ResourceIdentifier implicit =
                        runtime.serde().deserializeRid(queryParams.get("implicit"));
                Set<String> setEnd =
                        runtime.serde().deserializeStringSet(queryParams.get("setEnd"));
                Optional<ResourceIdentifier> optionalEnd =
                        runtime.serde().deserializeOptionalRid(queryParams.get("optionalEnd"));
                int result =
                        delegate.testQueryParams(
                                authHeader,
                                something,
                                implicit,
                                optionalMiddle,
                                setEnd,
                                optionalEnd,
                                query);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class TestNoResponseQueryParamsHandler implements HttpHandler {
            private final TypeToken<String> queryType = new TypeToken<String>() {};

            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                String query = runtime.serde().deserialize(queryType, exchange);
                Map<String, Deque<String>> queryParams = exchange.getQueryParameters();
                ResourceIdentifier something =
                        runtime.serde().deserializeRid(queryParams.get("different"));
                Optional<ResourceIdentifier> optionalMiddle =
                        runtime.serde().deserializeOptionalRid(queryParams.get("optionalMiddle"));
                ResourceIdentifier implicit =
                        runtime.serde().deserializeRid(queryParams.get("implicit"));
                Set<String> setEnd =
                        runtime.serde().deserializeStringSet(queryParams.get("setEnd"));
                Optional<ResourceIdentifier> optionalEnd =
                        runtime.serde().deserializeOptionalRid(queryParams.get("optionalEnd"));
                delegate.testNoResponseQueryParams(
                        authHeader,
                        something,
                        implicit,
                        optionalMiddle,
                        setEnd,
                        optionalEnd,
                        query);
                exchange.setStatusCode(StatusCodes.NO_CONTENT);
            }
        }

        private class TestBooleanHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                boolean result = delegate.testBoolean(authHeader);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class TestDoubleHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                double result = delegate.testDouble(authHeader);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class TestIntegerHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                int result = delegate.testInteger(authHeader);
                runtime.serde().serialize(result, exchange);
            }
        }

        private class TestPostOptionalHandler implements HttpHandler {
            private final TypeToken<Optional<String>> maybeStringType =
                    new TypeToken<Optional<String>>() {};

            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Optional<String> maybeString =
                        runtime.serde().deserialize(maybeStringType, exchange);
                Optional<String> result = delegate.testPostOptional(authHeader, maybeString);
                if (result.isPresent()) {
                    runtime.serde().serialize(result, exchange);
                } else {
                    exchange.setStatusCode(StatusCodes.NO_CONTENT);
                }
            }
        }

        private class TestOptionalIntegerAndDoubleHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                AuthHeader authHeader = runtime.auth().header(exchange);
                Map<String, Deque<String>> queryParams = exchange.getQueryParameters();
                OptionalInt maybeInteger =
                        runtime.serde().deserializeOptionalInteger(queryParams.get("maybeInteger"));
                OptionalDouble maybeDouble =
                        runtime.serde().deserializeOptionalDouble(queryParams.get("maybeDouble"));
                delegate.testOptionalIntegerAndDouble(authHeader, maybeInteger, maybeDouble);
                exchange.setStatusCode(StatusCodes.NO_CONTENT);
            }
        }
    }
}
