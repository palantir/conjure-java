package test.api;

import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.MoreExecutors;
import com.palantir.dialogue.Channel;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.Deserializer;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.HttpMethod;
import com.palantir.dialogue.PlainSerDe;
import com.palantir.dialogue.RemoteExceptions;
import com.palantir.dialogue.Request;
import com.palantir.dialogue.UrlBuilder;
import com.palantir.tokens.auth.BearerToken;
import io.undertow.util.PathTemplate;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import java.util.Map;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.dialogue.DialogueServiceGenerator")
public final class DialogueCookieService {
    private static final Endpoint eatCookies =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("cookies").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "CookieService";
                }

                @Override
                public String endpointName() {
                    return "eatCookies";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private DialogueCookieService() {}

    /** Creates a synchronous/blocking client for a CookieService service. */
    public static BlockingCookieService blocking(Channel channel, ConjureRuntime runtime) {
        AsyncCookieService delegate = async(channel, runtime);
        return new BlockingCookieService() {
            @Override
            public void eatCookies(BearerToken token) {
                RemoteExceptions.getUnchecked(delegate.eatCookies(token));
            }
        };
    }

    /** Creates an asynchronous/non-blocking client for a CookieService service. */
    public static AsyncCookieService async(Channel channel, ConjureRuntime runtime) {
        return new AsyncCookieService() {
            private final PlainSerDe plainSerDe = runtime.plainSerDe();

            private final Deserializer<Void> eatCookiesDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            @Override
            public ListenableFuture<Void> eatCookies(BearerToken token) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParam(
                        "Cookie", "PALANTIR_TOKEN=" + planSerDe.serializeBearerToken(token));
                return Futures.transform(
                        channel.execute(DialogueCookieService.eatCookies, _request.build()),
                        eatCookiesDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }
        };
    }
}
