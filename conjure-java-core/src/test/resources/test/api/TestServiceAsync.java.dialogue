package com.palantir.another;

import com.google.common.util.concurrent.ListenableFuture;
import com.palantir.dialogue.BinaryRequestBody;
import com.palantir.dialogue.Channel;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.Deserializer;
import com.palantir.dialogue.PlainSerDe;
import com.palantir.dialogue.Request;
import com.palantir.dialogue.Serializer;
import com.palantir.dialogue.TypeMarker;
import com.palantir.product.AliasedString;
import com.palantir.product.CreateDatasetRequest;
import com.palantir.product.datasets.BackingFileSystem;
import com.palantir.product.datasets.Dataset;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.Set;
import javax.annotation.Generated;

/** A Markdown description of the service. */
@Generated("com.palantir.conjure.java.services.dialogue.DialogueInterfaceGenerator")
public interface TestServiceAsync {
    /** Returns a mapping from file system id to backing file system configuration. */
    ListenableFuture<Map<String, BackingFileSystem>> getFileSystems(AuthHeader authHeader);

    ListenableFuture<Dataset> createDataset(
            AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request);

    ListenableFuture<Optional<Dataset>> getDataset(
            AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<InputStream> getRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<InputStream> getAliasedRawData(
            AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<Optional<InputStream>> maybeGetRawData(
            AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<AliasedString> getAliasedString(
            AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<Void> uploadRawData(AuthHeader authHeader, BinaryRequestBody input);

    ListenableFuture<Void> uploadAliasedRawData(AuthHeader authHeader, BinaryRequestBody input);

    /** @param datasetRid A valid dataset resource identifier. */
    ListenableFuture<Set<String>> getBranches(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * Gets all branches of this dataset.
     *
     * @param datasetRid A valid dataset resource identifier.
     * @deprecated use getBranches instead
     */
    @Deprecated
    ListenableFuture<Set<String>> getBranchesDeprecated(
            AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<Optional<String>> resolveBranch(
            AuthHeader authHeader, ResourceIdentifier datasetRid, String branch);

    ListenableFuture<Optional<String>> testParam(
            AuthHeader authHeader, ResourceIdentifier datasetRid);

    ListenableFuture<Integer> testQueryParams(
            AuthHeader authHeader,
            ResourceIdentifier something,
            ResourceIdentifier implicit,
            Optional<ResourceIdentifier> optionalMiddle,
            Set<String> setEnd,
            Optional<ResourceIdentifier> optionalEnd,
            String query);

    ListenableFuture<Void> testNoResponseQueryParams(
            AuthHeader authHeader,
            ResourceIdentifier something,
            ResourceIdentifier implicit,
            Optional<ResourceIdentifier> optionalMiddle,
            Set<String> setEnd,
            Optional<ResourceIdentifier> optionalEnd,
            String query);

    ListenableFuture<Boolean> testBoolean(AuthHeader authHeader);

    ListenableFuture<Double> testDouble(AuthHeader authHeader);

    ListenableFuture<Integer> testInteger(AuthHeader authHeader);

    ListenableFuture<Optional<String>> testPostOptional(
            AuthHeader authHeader, Optional<String> maybeString);

    ListenableFuture<Void> testOptionalIntegerAndDouble(
            AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble);

    ListenableFuture<Void> getForStrings(
            AuthHeader authHeader, ResourceIdentifier datasetRid, Set<AliasedString> strings);

    /** Creates an asynchronous/non-blocking client for a TestService service. */
    static TestServiceAsync of(Channel channel, ConjureRuntime runtime) {
        return new TestServiceAsync() {
            private final PlainSerDe plainSerDe = runtime.plainSerDe();

            private final Deserializer<Map<String, BackingFileSystem>> getFileSystemsDeserializer =
                    runtime.bodySerDe()
                            .deserializer(new TypeMarker<Map<String, BackingFileSystem>>() {});

            private final Serializer<CreateDatasetRequest> createDatasetSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<CreateDatasetRequest>() {});

            private final Deserializer<Dataset> createDatasetDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Dataset>() {});

            private final Deserializer<Optional<Dataset>> getDatasetDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<Dataset>>() {});

            private final Deserializer<AliasedString> getAliasedStringDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<AliasedString>() {});

            private final Deserializer<Void> uploadRawDataDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Serializer<InputStream> uploadAliasedRawDataSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<InputStream>() {});

            private final Deserializer<Void> uploadAliasedRawDataDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Deserializer<Set<String>> getBranchesDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Set<String>>() {});

            private final Deserializer<Set<String>> getBranchesDeprecatedDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Set<String>>() {});

            private final Deserializer<Optional<String>> resolveBranchDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<String>>() {});

            private final Deserializer<Optional<String>> testParamDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<String>>() {});

            private final Serializer<String> testQueryParamsSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<String>() {});

            private final Deserializer<Integer> testQueryParamsDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Integer>() {});

            private final Serializer<String> testNoResponseQueryParamsSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<String>() {});

            private final Deserializer<Void> testNoResponseQueryParamsDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Deserializer<Boolean> testBooleanDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Boolean>() {});

            private final Deserializer<Double> testDoubleDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Double>() {});

            private final Deserializer<Integer> testIntegerDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Integer>() {});

            private final Serializer<Optional<String>> testPostOptionalSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<Optional<String>>() {});

            private final Deserializer<Optional<String>> testPostOptionalDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<String>>() {});

            private final Deserializer<Void> testOptionalIntegerAndDoubleDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Deserializer<Void> getForStringsDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            @Override
            public ListenableFuture<Map<String, BackingFileSystem>> getFileSystems(
                    AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getFileSystems,
                                _request.build(),
                                getFileSystemsDeserializer);
            }

            @Override
            public ListenableFuture<Dataset> createDataset(
                    AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(createDatasetSerializer.serialize(request));
                _request.putHeaderParams("Test-Header", plainSerDe.serializeString(testHeaderArg));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.createDataset,
                                _request.build(),
                                createDatasetDeserializer);
            }

            @Override
            public ListenableFuture<Optional<Dataset>> getDataset(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getDataset,
                                _request.build(),
                                getDatasetDeserializer);
            }

            @Override
            public ListenableFuture<InputStream> getRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getRawData,
                                _request.build(),
                                runtime.bodySerDe().inputStreamDeserializer());
            }

            @Override
            public ListenableFuture<InputStream> getAliasedRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getAliasedRawData,
                                _request.build(),
                                runtime.bodySerDe().inputStreamDeserializer());
            }

            @Override
            public ListenableFuture<Optional<InputStream>> maybeGetRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.maybeGetRawData,
                                _request.build(),
                                runtime.bodySerDe().optionalInputStreamDeserializer());
            }

            @Override
            public ListenableFuture<AliasedString> getAliasedString(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getAliasedString,
                                _request.build(),
                                getAliasedStringDeserializer);
            }

            @Override
            public ListenableFuture<Void> uploadRawData(
                    AuthHeader authHeader, BinaryRequestBody input) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(runtime.bodySerDe().serialize(input));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.uploadRawData,
                                _request.build(),
                                uploadRawDataDeserializer);
            }

            @Override
            public ListenableFuture<Void> uploadAliasedRawData(
                    AuthHeader authHeader, BinaryRequestBody input) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(runtime.bodySerDe().serialize(input));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.uploadAliasedRawData,
                                _request.build(),
                                uploadAliasedRawDataDeserializer);
            }

            @Override
            public ListenableFuture<Set<String>> getBranches(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getBranches,
                                _request.build(),
                                getBranchesDeserializer);
            }

            @Override
            public ListenableFuture<Set<String>> getBranchesDeprecated(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getBranchesDeprecated,
                                _request.build(),
                                getBranchesDeprecatedDeserializer);
            }

            @Override
            public ListenableFuture<Optional<String>> resolveBranch(
                    AuthHeader authHeader, ResourceIdentifier datasetRid, String branch) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                _request.putPathParams("branch", plainSerDe.serializeString(branch));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.resolveBranch,
                                _request.build(),
                                resolveBranchDeserializer);
            }

            @Override
            public ListenableFuture<Optional<String>> testParam(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testParam,
                                _request.build(),
                                testParamDeserializer);
            }

            @Override
            public ListenableFuture<Integer> testQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(testQueryParamsSerializer.serialize(query));
                _request.putQueryParams("different", plainSerDe.serializeRid(something));
                if (optionalMiddle.isPresent()) {
                    _request.putQueryParams(
                            "optionalMiddle", plainSerDe.serializeRid(optionalMiddle.get()));
                }
                _request.putQueryParams("implicit", plainSerDe.serializeRid(implicit));
                for (String setEndElement : setEnd) {
                    _request.putQueryParams("setEnd", plainSerDe.serializeString(setEndElement));
                }
                if (optionalEnd.isPresent()) {
                    _request.putQueryParams(
                            "optionalEnd", plainSerDe.serializeRid(optionalEnd.get()));
                }
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testQueryParams,
                                _request.build(),
                                testQueryParamsDeserializer);
            }

            @Override
            public ListenableFuture<Void> testNoResponseQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(testNoResponseQueryParamsSerializer.serialize(query));
                _request.putQueryParams("different", plainSerDe.serializeRid(something));
                if (optionalMiddle.isPresent()) {
                    _request.putQueryParams(
                            "optionalMiddle", plainSerDe.serializeRid(optionalMiddle.get()));
                }
                _request.putQueryParams("implicit", plainSerDe.serializeRid(implicit));
                for (String setEndElement : setEnd) {
                    _request.putQueryParams("setEnd", plainSerDe.serializeString(setEndElement));
                }
                if (optionalEnd.isPresent()) {
                    _request.putQueryParams(
                            "optionalEnd", plainSerDe.serializeRid(optionalEnd.get()));
                }
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testNoResponseQueryParams,
                                _request.build(),
                                testNoResponseQueryParamsDeserializer);
            }

            @Override
            public ListenableFuture<Boolean> testBoolean(AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testBoolean,
                                _request.build(),
                                testBooleanDeserializer);
            }

            @Override
            public ListenableFuture<Double> testDouble(AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testDouble,
                                _request.build(),
                                testDoubleDeserializer);
            }

            @Override
            public ListenableFuture<Integer> testInteger(AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testInteger,
                                _request.build(),
                                testIntegerDeserializer);
            }

            @Override
            public ListenableFuture<Optional<String>> testPostOptional(
                    AuthHeader authHeader, Optional<String> maybeString) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(testPostOptionalSerializer.serialize(maybeString));
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testPostOptional,
                                _request.build(),
                                testPostOptionalDeserializer);
            }

            @Override
            public ListenableFuture<Void> testOptionalIntegerAndDouble(
                    AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                if (maybeInteger.isPresent()) {
                    _request.putQueryParams(
                            "maybeInteger", plainSerDe.serializeInteger(maybeInteger.getAsInt()));
                }
                if (maybeDouble.isPresent()) {
                    _request.putQueryParams(
                            "maybeDouble", plainSerDe.serializeDouble(maybeDouble.getAsDouble()));
                }
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.testOptionalIntegerAndDouble,
                                _request.build(),
                                testOptionalIntegerAndDoubleDeserializer);
            }

            @Override
            public ListenableFuture<Void> getForStrings(
                    AuthHeader authHeader,
                    ResourceIdentifier datasetRid,
                    Set<AliasedString> strings) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                for (AliasedString stringsElement : strings) {
                    _request.putQueryParams(
                            "strings", plainSerDe.serializeString(stringsElement.get()));
                }
                return runtime.clients()
                        .call(
                                channel,
                                DialogueTestEndpoints.getForStrings,
                                _request.build(),
                                getForStringsDeserializer);
            }
        };
    }
}
