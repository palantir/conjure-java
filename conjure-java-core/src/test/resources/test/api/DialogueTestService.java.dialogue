package com.palantir.another;

import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.MoreExecutors;
import com.palantir.dialogue.BinaryRequestBody;
import com.palantir.dialogue.Channel;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.Deserializer;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.HttpMethod;
import com.palantir.dialogue.PathTemplate;
import com.palantir.dialogue.PlainSerDe;
import com.palantir.dialogue.RemoteExceptions;
import com.palantir.dialogue.Request;
import com.palantir.dialogue.Serializer;
import com.palantir.dialogue.TypeMarker;
import com.palantir.dialogue.UrlBuilder;
import com.palantir.product.AliasedString;
import com.palantir.product.CreateDatasetRequest;
import com.palantir.product.NestedAliasedBinary;
import com.palantir.product.datasets.BackingFileSystem;
import com.palantir.product.datasets.Dataset;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.Set;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.dialogue.DialogueServiceGenerator")
public final class DialogueTestService {
    private static final Endpoint getFileSystems =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("fileSystems").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getFileSystems";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint createDataset =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("datasets").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.POST;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "createDataset";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getDataset =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getDataset";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getRawData =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("raw")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getRawData";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getAliasedRawData =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("raw-aliased")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getAliasedRawData";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint maybeGetRawData =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("raw-maybe")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "maybeGetRawData";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getAliasedString =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("string-aliased")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getAliasedString";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint uploadRawData =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .fixed("upload-raw")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.POST;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "uploadRawData";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint uploadAliasedRawData =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .fixed("upload-raw-aliased")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.POST;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "uploadAliasedRawData";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getBranches =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("branches")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getBranches";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getBranchesDeprecated =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("branchesDeprecated")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getBranchesDeprecated";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint resolveBranch =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("branches")
                                .variable("branch")
                                .fixed("resolve")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "resolveBranch";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testParam =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("testParam")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testParam";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testQueryParams =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("test-query-params").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.POST;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testQueryParams";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testNoResponseQueryParams =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("test-no-response-query-params")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.POST;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testNoResponseQueryParams";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testBoolean =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("boolean").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testBoolean";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testDouble =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("double").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testDouble";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testInteger =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("integer").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testInteger";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testPostOptional =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder().fixed("catalog").fixed("optional").build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.POST;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testPostOptional";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint testOptionalIntegerAndDouble =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("optional-integer-double")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "testOptionalIntegerAndDouble";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private static final Endpoint getForStrings =
            new Endpoint() {
                private final PathTemplate pathTemplate =
                        PathTemplate.builder()
                                .fixed("catalog")
                                .fixed("datasets")
                                .variable("datasetRid")
                                .fixed("strings")
                                .build();

                @Override
                public void renderPath(Map<String, String> params, UrlBuilder url) {
                    pathTemplate.fill(params, url);
                }

                @Override
                public HttpMethod httpMethod() {
                    return HttpMethod.GET;
                }

                @Override
                public String serviceName() {
                    return "TestService";
                }

                @Override
                public String endpointName() {
                    return "getForStrings";
                }

                @Override
                public String version() {
                    return "";
                }
            };

    private DialogueTestService() {}

    /** Creates a synchronous/blocking client for a TestService service. */
    public static BlockingTestService blocking(Channel channel, ConjureRuntime runtime) {
        AsyncTestService delegate = async(channel, runtime);
        return new BlockingTestService() {
            @Override
            public Map<String, BackingFileSystem> getFileSystems(AuthHeader authHeader) {
                return RemoteExceptions.getUnchecked(delegate.getFileSystems(authHeader));
            }

            @Override
            public Dataset createDataset(
                    AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request) {
                return RemoteExceptions.getUnchecked(
                        delegate.createDataset(authHeader, testHeaderArg, request));
            }

            @Override
            public Optional<Dataset> getDataset(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(delegate.getDataset(authHeader, datasetRid));
            }

            @Override
            public InputStream getRawData(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(delegate.getRawData(authHeader, datasetRid));
            }

            @Override
            public NestedAliasedBinary getAliasedRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(
                        delegate.getAliasedRawData(authHeader, datasetRid));
            }

            @Override
            public Optional<ByteBuffer> maybeGetRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(
                        delegate.maybeGetRawData(authHeader, datasetRid));
            }

            @Override
            public AliasedString getAliasedString(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(
                        delegate.getAliasedString(authHeader, datasetRid));
            }

            @Override
            public void uploadRawData(AuthHeader authHeader, BinaryRequestBody input) {
                RemoteExceptions.getUnchecked(delegate.uploadRawData(authHeader, input));
            }

            @Override
            public void uploadAliasedRawData(AuthHeader authHeader, NestedAliasedBinary input) {
                RemoteExceptions.getUnchecked(delegate.uploadAliasedRawData(authHeader, input));
            }

            @Override
            public Set<String> getBranches(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(delegate.getBranches(authHeader, datasetRid));
            }

            @Override
            public Set<String> getBranchesDeprecated(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(
                        delegate.getBranchesDeprecated(authHeader, datasetRid));
            }

            @Override
            public Optional<String> resolveBranch(
                    AuthHeader authHeader, ResourceIdentifier datasetRid, String branch) {
                return RemoteExceptions.getUnchecked(
                        delegate.resolveBranch(authHeader, datasetRid, branch));
            }

            @Override
            public Optional<String> testParam(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return RemoteExceptions.getUnchecked(delegate.testParam(authHeader, datasetRid));
            }

            @Override
            public int testQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                return RemoteExceptions.getUnchecked(
                        delegate.testQueryParams(
                                authHeader,
                                something,
                                implicit,
                                optionalMiddle,
                                setEnd,
                                optionalEnd,
                                query));
            }

            @Override
            public void testNoResponseQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                RemoteExceptions.getUnchecked(
                        delegate.testNoResponseQueryParams(
                                authHeader,
                                something,
                                implicit,
                                optionalMiddle,
                                setEnd,
                                optionalEnd,
                                query));
            }

            @Override
            public boolean testBoolean(AuthHeader authHeader) {
                return RemoteExceptions.getUnchecked(delegate.testBoolean(authHeader));
            }

            @Override
            public double testDouble(AuthHeader authHeader) {
                return RemoteExceptions.getUnchecked(delegate.testDouble(authHeader));
            }

            @Override
            public int testInteger(AuthHeader authHeader) {
                return RemoteExceptions.getUnchecked(delegate.testInteger(authHeader));
            }

            @Override
            public Optional<String> testPostOptional(
                    AuthHeader authHeader, Optional<String> maybeString) {
                return RemoteExceptions.getUnchecked(
                        delegate.testPostOptional(authHeader, maybeString));
            }

            @Override
            public void testOptionalIntegerAndDouble(
                    AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble) {
                RemoteExceptions.getUnchecked(
                        delegate.testOptionalIntegerAndDouble(
                                authHeader, maybeInteger, maybeDouble));
            }

            @Override
            public void getForStrings(
                    AuthHeader authHeader,
                    ResourceIdentifier datasetRid,
                    Set<AliasedString> strings) {
                RemoteExceptions.getUnchecked(
                        delegate.getForStrings(authHeader, datasetRid, strings));
            }
        };
    }

    /** Creates an asynchronous/non-blocking client for a TestService service. */
    public static AsyncTestService async(Channel channel, ConjureRuntime runtime) {
        return new AsyncTestService() {
            private final PlainSerDe plainSerDe = runtime.plainSerDe();

            private final Deserializer<Map<String, BackingFileSystem>> getFileSystemsDeserializer =
                    runtime.bodySerDe()
                            .deserializer(new TypeMarker<Map<String, BackingFileSystem>>() {});

            private final Serializer<CreateDatasetRequest> createDatasetSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<CreateDatasetRequest>() {});

            private final Deserializer<Dataset> createDatasetDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Dataset>() {});

            private final Deserializer<Optional<Dataset>> getDatasetDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<Dataset>>() {});

            private final Deserializer<NestedAliasedBinary> getAliasedRawDataDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<NestedAliasedBinary>() {});

            private final Deserializer<Optional<ByteBuffer>> maybeGetRawDataDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<ByteBuffer>>() {});

            private final Deserializer<AliasedString> getAliasedStringDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<AliasedString>() {});

            private final Deserializer<Void> uploadRawDataDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Serializer<NestedAliasedBinary> uploadAliasedRawDataSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<NestedAliasedBinary>() {});

            private final Deserializer<Void> uploadAliasedRawDataDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Deserializer<Set<String>> getBranchesDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Set<String>>() {});

            private final Deserializer<Set<String>> getBranchesDeprecatedDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Set<String>>() {});

            private final Deserializer<Optional<String>> resolveBranchDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<String>>() {});

            private final Deserializer<Optional<String>> testParamDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<String>>() {});

            private final Serializer<String> testQueryParamsSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<String>() {});

            private final Deserializer<Integer> testQueryParamsDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Integer>() {});

            private final Serializer<String> testNoResponseQueryParamsSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<String>() {});

            private final Deserializer<Void> testNoResponseQueryParamsDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Deserializer<Boolean> testBooleanDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Boolean>() {});

            private final Deserializer<Double> testDoubleDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Double>() {});

            private final Deserializer<Integer> testIntegerDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Integer>() {});

            private final Serializer<Optional<String>> testPostOptionalSerializer =
                    runtime.bodySerDe().serializer(new TypeMarker<Optional<String>>() {});

            private final Deserializer<Optional<String>> testPostOptionalDeserializer =
                    runtime.bodySerDe().deserializer(new TypeMarker<Optional<String>>() {});

            private final Deserializer<Void> testOptionalIntegerAndDoubleDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            private final Deserializer<Void> getForStringsDeserializer =
                    runtime.bodySerDe().emptyBodyDeserializer();

            @Override
            public ListenableFuture<Map<String, BackingFileSystem>> getFileSystems(
                    AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return Futures.transform(
                        channel.execute(DialogueTestService.getFileSystems, _request.build()),
                        getFileSystemsDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Dataset> createDataset(
                    AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(createDatasetSerializer.serialize(request));
                _request.putHeaderParams("Test-Header", plainSerDe.serializeString(testHeaderArg));
                return Futures.transform(
                        channel.execute(DialogueTestService.createDataset, _request.build()),
                        createDatasetDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Optional<Dataset>> getDataset(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.getDataset, _request.build()),
                        getDatasetDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<InputStream> getRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.getRawData, _request.build()),
                        runtime.bodySerDe()::deserializeInputStream,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<NestedAliasedBinary> getAliasedRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.getAliasedRawData, _request.build()),
                        getAliasedRawDataDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Optional<ByteBuffer>> maybeGetRawData(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.maybeGetRawData, _request.build()),
                        maybeGetRawDataDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<AliasedString> getAliasedString(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.getAliasedString, _request.build()),
                        getAliasedStringDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Void> uploadRawData(
                    AuthHeader authHeader, BinaryRequestBody input) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(runtime.bodySerDe().serialize(input));
                return Futures.transform(
                        channel.execute(DialogueTestService.uploadRawData, _request.build()),
                        uploadRawDataDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Void> uploadAliasedRawData(
                    AuthHeader authHeader, NestedAliasedBinary input) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(uploadAliasedRawDataSerializer.serialize(input));
                return Futures.transform(
                        channel.execute(DialogueTestService.uploadAliasedRawData, _request.build()),
                        uploadAliasedRawDataDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Set<String>> getBranches(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.getBranches, _request.build()),
                        getBranchesDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Set<String>> getBranchesDeprecated(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(
                                DialogueTestService.getBranchesDeprecated, _request.build()),
                        getBranchesDeprecatedDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Optional<String>> resolveBranch(
                    AuthHeader authHeader, ResourceIdentifier datasetRid, String branch) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                _request.putPathParams("branch", plainSerDe.serializeString(branch));
                return Futures.transform(
                        channel.execute(DialogueTestService.resolveBranch, _request.build()),
                        resolveBranchDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Optional<String>> testParam(
                    AuthHeader authHeader, ResourceIdentifier datasetRid) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                return Futures.transform(
                        channel.execute(DialogueTestService.testParam, _request.build()),
                        testParamDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Integer> testQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(testQueryParamsSerializer.serialize(query));
                _request.putQueryParams("different", plainSerDe.serializeRid(something));
                if (optionalMiddle.isPresent()) {
                    _request.putQueryParams(
                            "optionalMiddle", plainSerDe.serializeRid(optionalMiddle.get()));
                }
                _request.putQueryParams("implicit", plainSerDe.serializeRid(implicit));
                for (String setEndElement : setEnd) {
                    _request.putQueryParams("setEnd", plainSerDe.serializeString(setEndElement));
                }
                if (optionalEnd.isPresent()) {
                    _request.putQueryParams(
                            "optionalEnd", plainSerDe.serializeRid(optionalEnd.get()));
                }
                return Futures.transform(
                        channel.execute(DialogueTestService.testQueryParams, _request.build()),
                        testQueryParamsDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Void> testNoResponseQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(testNoResponseQueryParamsSerializer.serialize(query));
                _request.putQueryParams("different", plainSerDe.serializeRid(something));
                if (optionalMiddle.isPresent()) {
                    _request.putQueryParams(
                            "optionalMiddle", plainSerDe.serializeRid(optionalMiddle.get()));
                }
                _request.putQueryParams("implicit", plainSerDe.serializeRid(implicit));
                for (String setEndElement : setEnd) {
                    _request.putQueryParams("setEnd", plainSerDe.serializeString(setEndElement));
                }
                if (optionalEnd.isPresent()) {
                    _request.putQueryParams(
                            "optionalEnd", plainSerDe.serializeRid(optionalEnd.get()));
                }
                return Futures.transform(
                        channel.execute(
                                DialogueTestService.testNoResponseQueryParams, _request.build()),
                        testNoResponseQueryParamsDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Boolean> testBoolean(AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return Futures.transform(
                        channel.execute(DialogueTestService.testBoolean, _request.build()),
                        testBooleanDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Double> testDouble(AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return Futures.transform(
                        channel.execute(DialogueTestService.testDouble, _request.build()),
                        testDoubleDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Integer> testInteger(AuthHeader authHeader) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                return Futures.transform(
                        channel.execute(DialogueTestService.testInteger, _request.build()),
                        testIntegerDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Optional<String>> testPostOptional(
                    AuthHeader authHeader, Optional<String> maybeString) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.body(testPostOptionalSerializer.serialize(maybeString));
                return Futures.transform(
                        channel.execute(DialogueTestService.testPostOptional, _request.build()),
                        testPostOptionalDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Void> testOptionalIntegerAndDouble(
                    AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                if (maybeInteger.isPresent()) {
                    _request.putQueryParams(
                            "maybeInteger", plainSerDe.serializeInteger(maybeInteger.get()));
                }
                if (maybeDouble.isPresent()) {
                    _request.putQueryParams(
                            "maybeDouble", plainSerDe.serializeDouble(maybeDouble.get()));
                }
                return Futures.transform(
                        channel.execute(
                                DialogueTestService.testOptionalIntegerAndDouble, _request.build()),
                        testOptionalIntegerAndDoubleDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }

            @Override
            public ListenableFuture<Void> getForStrings(
                    AuthHeader authHeader,
                    ResourceIdentifier datasetRid,
                    Set<AliasedString> strings) {
                Request.Builder _request = Request.builder();
                _request.putHeaderParams(
                        "Authorization",
                        plainSerDe.serializeBearerToken(authHeader.getBearerToken()));
                _request.putPathParams("datasetRid", plainSerDe.serializeRid(datasetRid));
                for (AliasedString stringsElement : strings) {
                    _request.putQueryParams(
                            "strings", plainSerDe.serializeString(stringsElement.get()));
                }
                return Futures.transform(
                        channel.execute(DialogueTestService.getForStrings, _request.build()),
                        getForStringsDeserializer::deserialize,
                        MoreExecutors.directExecutor());
            }
        };
    }
}
