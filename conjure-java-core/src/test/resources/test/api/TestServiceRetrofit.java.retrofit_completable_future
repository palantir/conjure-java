package com.palantir.another;

import com.palantir.product.CreateDatasetRequest;
import com.palantir.product.datasets.BackingFileSystem;
import com.palantir.product.datasets.Dataset;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.lang.Void;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import javax.annotation.Generated;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.POST;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Streaming;

/** A Markdown description of the service. */
@Generated("com.palantir.conjure.java.services.Retrofit2ServiceGenerator")
public interface TestServiceRetrofit {
    /** Returns a mapping from file system id to backing file system configuration. */
    @GET("./catalog/fileSystems")
    CompletableFuture<Map<String, BackingFileSystem>> getFileSystems(
            @Header("Authorization") AuthHeader authHeader);

    @POST("./catalog/datasets")
    CompletableFuture<Dataset> createDataset(
            @Header("Authorization") AuthHeader authHeader,
            @Body CreateDatasetRequest request,
            @Header("Test-Header") String testHeaderArg);

    @GET("./catalog/datasets/{datasetRid}")
    CompletableFuture<Optional<Dataset>> getDataset(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/raw")
    @Streaming
    CompletableFuture<ResponseBody> getRawData(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/raw-maybe")
    CompletableFuture<Optional<ByteBuffer>> maybeGetRawData(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid);

    @POST("./catalog/datasets/upload-raw")
    CompletableFuture<Void> uploadRawData(
            @Header("Authorization") AuthHeader authHeader, @Body RequestBody input);

    @GET("./catalog/datasets/{datasetRid}/branches")
    CompletableFuture<Set<String>> getBranches(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid);

    /**
     * Gets all branches of this dataset.
     *
     * @deprecated use getBranches instead
     */
    @GET("./catalog/datasets/{datasetRid}/branchesDeprecated")
    @Deprecated
    CompletableFuture<Set<String>> getBranchesDeprecated(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/branches/{branch}/resolve")
    CompletableFuture<Optional<String>> resolveBranch(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid,
            @Path(value = "branch", encoded = true) String branch);

    @GET("./catalog/datasets/{datasetRid}/testParam")
    CompletableFuture<Optional<String>> testParam(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid);

    @POST("./catalog/test-query-params")
    CompletableFuture<Integer> testQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Body String query,
            @Query("different") ResourceIdentifier something,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("setEnd") Set<String> setEnd,
            @Query("optionalEnd") Optional<ResourceIdentifier> optionalEnd);

    @POST("./catalog/test-no-response-query-params")
    CompletableFuture<Void> testNoResponseQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Body String query,
            @Query("different") ResourceIdentifier something,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("setEnd") Set<String> setEnd,
            @Query("optionalEnd") Optional<ResourceIdentifier> optionalEnd);

    @GET("./catalog/boolean")
    CompletableFuture<Boolean> testBoolean(@Header("Authorization") AuthHeader authHeader);

    @GET("./catalog/double")
    CompletableFuture<Double> testDouble(@Header("Authorization") AuthHeader authHeader);

    @GET("./catalog/integer")
    CompletableFuture<Integer> testInteger(@Header("Authorization") AuthHeader authHeader);
}
