package com.palantir.another;

import com.google.common.util.concurrent.ListenableFuture;
import com.palantir.product.AliasedString;
import com.palantir.product.CreateDatasetRequest;
import com.palantir.product.datasets.BackingFileSystem;
import com.palantir.product.datasets.Dataset;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.Set;
import javax.annotation.Generated;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Streaming;

/**
 * A Markdown description of the service.
 */
@Generated("com.palantir.conjure.java.services.Retrofit2ServiceGenerator")
public interface TestServiceRetrofit {
    /**
     * Returns a mapping from file system id to backing file system configuration.
     */
    @GET("./catalog/fileSystems")
    @Headers({"hr-path-template: /catalog/fileSystems", "Accept: application/json"})
    ListenableFuture<Map<String, BackingFileSystem>> getFileSystems(@Header("Authorization") AuthHeader authHeader);

    /**
     * foo $bar
     */
    @POST("./catalog/datasets")
    @Headers({"hr-path-template: /catalog/datasets", "Accept: application/json"})
    ListenableFuture<Dataset> createDataset(
            @Header("Authorization") AuthHeader authHeader,
            @Header("Test-Header") String testHeaderArg,
            @Body CreateDatasetRequest request);

    @GET("./catalog/datasets/{datasetRid}")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}", "Accept: application/json"})
    ListenableFuture<Optional<Dataset>> getDataset(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/raw")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/raw", "Accept: application/octet-stream"})
    @Streaming
    ListenableFuture<ResponseBody> getRawData(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/raw-aliased")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/raw-aliased", "Accept: application/octet-stream"})
    @Streaming
    ListenableFuture<ResponseBody> getAliasedRawData(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/raw-maybe")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/raw-maybe", "Accept: application/octet-stream"})
    @Streaming
    ListenableFuture<Optional<ResponseBody>> maybeGetRawData(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/string-aliased")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/string-aliased", "Accept: application/json"})
    ListenableFuture<AliasedString> getAliasedString(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @POST("./catalog/datasets/upload-raw")
    @Headers({"hr-path-template: /catalog/datasets/upload-raw", "Accept: application/json"})
    ListenableFuture<Void> uploadRawData(@Header("Authorization") AuthHeader authHeader, @Body RequestBody input);

    @POST("./catalog/datasets/upload-raw-aliased")
    @Headers({"hr-path-template: /catalog/datasets/upload-raw-aliased", "Accept: application/json"})
    ListenableFuture<Void> uploadAliasedRawData(
            @Header("Authorization") AuthHeader authHeader, @Body RequestBody input);

    /**
     * @param datasetRid A valid dataset resource identifier.
     */
    @GET("./catalog/datasets/{datasetRid}/branches")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/branches", "Accept: application/json"})
    ListenableFuture<Set<String>> getBranches(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    /**
     * Gets all branches of this dataset.
     * @param datasetRid A valid dataset resource identifier.
     * @deprecated use getBranches instead
     */
    @GET("./catalog/datasets/{datasetRid}/branchesDeprecated")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/branchesDeprecated", "Accept: application/json"})
    @Deprecated
    ListenableFuture<Set<String>> getBranchesDeprecated(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @GET("./catalog/datasets/{datasetRid}/branches/{branch}/resolve")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/branches/{branch}/resolve", "Accept: application/json"})
    ListenableFuture<Optional<String>> resolveBranch(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid,
            @Path(value = "branch", encoded = true) String branch);

    @GET("./catalog/datasets/{datasetRid}/testParam")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/testParam", "Accept: application/json"})
    ListenableFuture<Optional<String>> testParam(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid);

    @POST("./catalog/test-query-params")
    @Headers({"hr-path-template: /catalog/test-query-params", "Accept: application/json"})
    ListenableFuture<Integer> testQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Query("setEnd") Set<String> setEnd,
            @Query("optionalEnd") Optional<ResourceIdentifier> optionalEnd,
            @Body String query);

    @POST("./catalog/test-no-response-query-params")
    @Headers({"hr-path-template: /catalog/test-no-response-query-params", "Accept: application/json"})
    ListenableFuture<Void> testNoResponseQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Query("setEnd") Set<String> setEnd,
            @Query("optionalEnd") Optional<ResourceIdentifier> optionalEnd,
            @Body String query);

    @GET("./catalog/boolean")
    @Headers({"hr-path-template: /catalog/boolean", "Accept: application/json"})
    ListenableFuture<Boolean> testBoolean(@Header("Authorization") AuthHeader authHeader);

    @GET("./catalog/double")
    @Headers({"hr-path-template: /catalog/double", "Accept: application/json"})
    ListenableFuture<Double> testDouble(@Header("Authorization") AuthHeader authHeader);

    @GET("./catalog/integer")
    @Headers({"hr-path-template: /catalog/integer", "Accept: application/json"})
    ListenableFuture<Integer> testInteger(@Header("Authorization") AuthHeader authHeader);

    @POST("./catalog/optional")
    @Headers({"hr-path-template: /catalog/optional", "Accept: application/json"})
    ListenableFuture<Optional<String>> testPostOptional(
            @Header("Authorization") AuthHeader authHeader, @Body Optional<String> maybeString);

    @GET("./catalog/optional-integer-double")
    @Headers({"hr-path-template: /catalog/optional-integer-double", "Accept: application/json"})
    ListenableFuture<Void> testOptionalIntegerAndDouble(
            @Header("Authorization") AuthHeader authHeader,
            @Query("maybeInteger") OptionalInt maybeInteger,
            @Query("maybeDouble") OptionalDouble maybeDouble);

    @GET("./catalog/datasets/{datasetRid}/strings")
    @Headers({"hr-path-template: /catalog/datasets/{datasetRid}/strings", "Accept: application/json"})
    ListenableFuture<Void> getForStrings(
            @Header("Authorization") AuthHeader authHeader,
            @Path("datasetRid") ResourceIdentifier datasetRid,
            @Query("strings") Set<AliasedString> strings);

    @Deprecated
    default ListenableFuture<Integer> testQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Body String query) {
        return testQueryParams(
                authHeader, something, implicit, Optional.empty(), Collections.emptySet(), Optional.empty(), query);
    }

    @Deprecated
    default ListenableFuture<Integer> testQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Body String query) {
        return testQueryParams(
                authHeader, something, implicit, optionalMiddle, Collections.emptySet(), Optional.empty(), query);
    }

    @Deprecated
    default ListenableFuture<Integer> testQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Query("setEnd") Set<String> setEnd,
            @Body String query) {
        return testQueryParams(authHeader, something, implicit, optionalMiddle, setEnd, Optional.empty(), query);
    }

    @Deprecated
    default void testNoResponseQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Body String query) {
        testNoResponseQueryParams(
                authHeader, something, implicit, Optional.empty(), Collections.emptySet(), Optional.empty(), query);
    }

    @Deprecated
    default void testNoResponseQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Body String query) {
        testNoResponseQueryParams(
                authHeader, something, implicit, optionalMiddle, Collections.emptySet(), Optional.empty(), query);
    }

    @Deprecated
    default void testNoResponseQueryParams(
            @Header("Authorization") AuthHeader authHeader,
            @Query("different") ResourceIdentifier something,
            @Query("implicit") ResourceIdentifier implicit,
            @Query("optionalMiddle") Optional<ResourceIdentifier> optionalMiddle,
            @Query("setEnd") Set<String> setEnd,
            @Body String query) {
        testNoResponseQueryParams(authHeader, something, implicit, optionalMiddle, setEnd, Optional.empty(), query);
    }

    @Deprecated
    default void testOptionalIntegerAndDouble(@Header("Authorization") AuthHeader authHeader) {
        testOptionalIntegerAndDouble(authHeader, OptionalInt.empty(), OptionalDouble.empty());
    }

    @Deprecated
    default void testOptionalIntegerAndDouble(
            @Header("Authorization") AuthHeader authHeader, @Query("maybeInteger") OptionalInt maybeInteger) {
        testOptionalIntegerAndDouble(authHeader, maybeInteger, OptionalDouble.empty());
    }

    @Deprecated
    default void getForStrings(
            @Header("Authorization") AuthHeader authHeader, @Path("datasetRid") ResourceIdentifier datasetRid) {
        getForStrings(authHeader, datasetRid, Collections.emptySet());
    }
}
