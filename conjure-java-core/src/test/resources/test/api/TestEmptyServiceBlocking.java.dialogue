package com.palantir.another;

import com.palantir.dialogue.Channel;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.DialogueService;
import com.palantir.dialogue.DialogueServiceFactory;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.EndpointChannel;
import com.palantir.dialogue.EndpointChannelFactory;
import com.palantir.dialogue.PlainSerDe;
import java.lang.Override;
import java.lang.String;
import javax.annotation.processing.Generated;

/** This service has no endpoints. */
@Generated("com.palantir.conjure.java.services.dialogue.DialogueInterfaceGenerator")
@DialogueService(TestEmptyServiceBlocking.Factory.class)
public interface TestEmptyServiceBlocking {
    /** Creates a synchronous/blocking client for a TestEmptyService service. */
    static TestEmptyServiceBlocking of(EndpointChannelFactory _endpointChannelFactory, ConjureRuntime _runtime) {
        return new TestEmptyServiceBlocking() {
            private final PlainSerDe _plainSerDe = _runtime.plainSerDe();

            @Override
            public String toString() {
                return "TestEmptyServiceBlocking{_endpointChannelFactory=" + _endpointChannelFactory + ", runtime="
                        + _runtime + '}';
            }
        };
    }

    /** Creates an asynchronous/non-blocking client for a TestEmptyService service. */
    static TestEmptyServiceBlocking of(Channel _channel, ConjureRuntime _runtime) {
        if (_channel instanceof EndpointChannelFactory) {
            return of((EndpointChannelFactory) _channel, _runtime);
        }
        return of(
                new EndpointChannelFactory() {
                    @Override
                    public EndpointChannel endpoint(Endpoint endpoint) {
                        return _runtime.clients().bind(_channel, endpoint);
                    }
                },
                _runtime);
    }

    final class Factory implements DialogueServiceFactory<TestEmptyServiceBlocking> {
        @Override
        public TestEmptyServiceBlocking create(EndpointChannelFactory endpointChannelFactory, ConjureRuntime runtime) {
            return TestEmptyServiceBlocking.of(endpointChannelFactory, runtime);
        }
    }
}
