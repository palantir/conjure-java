package test.prefix.com.palantir.another;

import com.google.errorprone.annotations.MustBeClosed;
import com.palantir.dialogue.BinaryRequestBody;
import com.palantir.dialogue.Channel;
import com.palantir.dialogue.ConjureRuntime;
import com.palantir.dialogue.Endpoint;
import com.palantir.dialogue.EndpointChannel;
import com.palantir.dialogue.EndpointChannelFactory;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.Set;
import javax.annotation.Generated;
import javax.annotation.Nonnull;
import test.prefix.com.palantir.product.AliasedString;
import test.prefix.com.palantir.product.CreateDatasetRequest;
import test.prefix.com.palantir.product.datasets.BackingFileSystem;
import test.prefix.com.palantir.product.datasets.Dataset;

/**
 * A Markdown description of the service.
 */
@Generated("com.palantir.conjure.java.services.dialogue.DialogueInterfaceGenerator")
public interface TestServiceBlocking {
    /**
     * Returns a mapping from file system id to backing file system configuration.
     * @apiNote {@code GET /catalog/fileSystems}
     */
    @Nonnull
    Map<String, BackingFileSystem> getFileSystems(AuthHeader authHeader);

    /**
     * foo $bar
     * @apiNote {@code POST /catalog/datasets}
     */
    Dataset createDataset(AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}}
     */
    Optional<Dataset> getDataset(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/raw}
     */
    InputStream getRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/raw-aliased}
     */
    InputStream getAliasedRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/raw-maybe}
     */
    Optional<InputStream> maybeGetRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/string-aliased}
     */
    AliasedString getAliasedString(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code POST /catalog/datasets/upload-raw}
     */
    void uploadRawData(AuthHeader authHeader, BinaryRequestBody input);

    /**
     * @apiNote {@code POST /catalog/datasets/upload-raw-aliased}
     */
    void uploadAliasedRawData(AuthHeader authHeader, BinaryRequestBody input);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/branches}
     * @param datasetRid A valid dataset resource identifier.
     */
    Set<String> getBranches(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * Gets all branches of this dataset.
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/branchesDeprecated}
     * @param datasetRid A valid dataset resource identifier.
     * @deprecated use getBranches instead
     */
    @Deprecated
    Set<String> getBranchesDeprecated(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/branches/{branch:.+}/resolve}
     */
    Optional<String> resolveBranch(AuthHeader authHeader, ResourceIdentifier datasetRid, String branch);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/testParam}
     */
    Optional<String> testParam(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * @apiNote {@code POST /catalog/test-query-params}
     */
    int testQueryParams(
            AuthHeader authHeader,
            ResourceIdentifier something,
            ResourceIdentifier implicit,
            Optional<ResourceIdentifier> optionalMiddle,
            Set<String> setEnd,
            Optional<ResourceIdentifier> optionalEnd,
            String query);

    /**
     * @apiNote {@code POST /catalog/test-no-response-query-params}
     */
    void testNoResponseQueryParams(
            AuthHeader authHeader,
            ResourceIdentifier something,
            ResourceIdentifier implicit,
            Optional<ResourceIdentifier> optionalMiddle,
            Set<String> setEnd,
            Optional<ResourceIdentifier> optionalEnd,
            String query);

    /**
     * @apiNote {@code GET /catalog/boolean}
     */
    boolean testBoolean(AuthHeader authHeader);

    /**
     * @apiNote {@code GET /catalog/double}
     */
    double testDouble(AuthHeader authHeader);

    /**
     * @apiNote {@code GET /catalog/integer}
     */
    int testInteger(AuthHeader authHeader);

    /**
     * @apiNote {@code POST /catalog/optional}
     */
    Optional<String> testPostOptional(AuthHeader authHeader, Optional<String> maybeString);

    /**
     * @apiNote {@code GET /catalog/optional-integer-double}
     */
    void testOptionalIntegerAndDouble(AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble);

    /**
     * @apiNote {@code GET /catalog/datasets/{datasetRid}/strings}
     */
    void getForStrings(AuthHeader authHeader, ResourceIdentifier datasetRid, Set<AliasedString> strings);

    /**
     * Creates a synchronous/blocking client for a TestService service.
     */
    static TestServiceBlocking of(EndpointChannelFactory _endpointChannelFactory, ConjureRuntime _runtime) {
        TestServiceAsync delegate = TestServiceAsync.of(_endpointChannelFactory, _runtime);
        return new TestServiceBlocking() {
            @Override
            public Map<String, BackingFileSystem> getFileSystems(AuthHeader authHeader) {
                return _runtime.clients().block(delegate.getFileSystems(authHeader));
            }

            @Override
            public Dataset createDataset(AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request) {
                return _runtime.clients().block(delegate.createDataset(authHeader, testHeaderArg, request));
            }

            @Override
            public Optional<Dataset> getDataset(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.getDataset(authHeader, datasetRid));
            }

            @Override
            @MustBeClosed
            public InputStream getRawData(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.getRawData(authHeader, datasetRid));
            }

            @Override
            @MustBeClosed
            public InputStream getAliasedRawData(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.getAliasedRawData(authHeader, datasetRid));
            }

            @Override
            public Optional<InputStream> maybeGetRawData(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.maybeGetRawData(authHeader, datasetRid));
            }

            @Override
            public AliasedString getAliasedString(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.getAliasedString(authHeader, datasetRid));
            }

            @Override
            public void uploadRawData(AuthHeader authHeader, BinaryRequestBody input) {
                _runtime.clients().block(delegate.uploadRawData(authHeader, input));
            }

            @Override
            public void uploadAliasedRawData(AuthHeader authHeader, BinaryRequestBody input) {
                _runtime.clients().block(delegate.uploadAliasedRawData(authHeader, input));
            }

            @Override
            public Set<String> getBranches(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.getBranches(authHeader, datasetRid));
            }

            @Override
            @SuppressWarnings("deprecation")
            public Set<String> getBranchesDeprecated(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.getBranchesDeprecated(authHeader, datasetRid));
            }

            @Override
            public Optional<String> resolveBranch(AuthHeader authHeader, ResourceIdentifier datasetRid, String branch) {
                return _runtime.clients().block(delegate.resolveBranch(authHeader, datasetRid, branch));
            }

            @Override
            public Optional<String> testParam(AuthHeader authHeader, ResourceIdentifier datasetRid) {
                return _runtime.clients().block(delegate.testParam(authHeader, datasetRid));
            }

            @Override
            public int testQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                return _runtime.clients()
                        .block(delegate.testQueryParams(
                                authHeader, something, implicit, optionalMiddle, setEnd, optionalEnd, query));
            }

            @Override
            public void testNoResponseQueryParams(
                    AuthHeader authHeader,
                    ResourceIdentifier something,
                    ResourceIdentifier implicit,
                    Optional<ResourceIdentifier> optionalMiddle,
                    Set<String> setEnd,
                    Optional<ResourceIdentifier> optionalEnd,
                    String query) {
                _runtime.clients()
                        .block(delegate.testNoResponseQueryParams(
                                authHeader, something, implicit, optionalMiddle, setEnd, optionalEnd, query));
            }

            @Override
            public boolean testBoolean(AuthHeader authHeader) {
                return _runtime.clients().block(delegate.testBoolean(authHeader));
            }

            @Override
            public double testDouble(AuthHeader authHeader) {
                return _runtime.clients().block(delegate.testDouble(authHeader));
            }

            @Override
            public int testInteger(AuthHeader authHeader) {
                return _runtime.clients().block(delegate.testInteger(authHeader));
            }

            @Override
            public Optional<String> testPostOptional(AuthHeader authHeader, Optional<String> maybeString) {
                return _runtime.clients().block(delegate.testPostOptional(authHeader, maybeString));
            }

            @Override
            public void testOptionalIntegerAndDouble(
                    AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble) {
                _runtime.clients().block(delegate.testOptionalIntegerAndDouble(authHeader, maybeInteger, maybeDouble));
            }

            @Override
            public void getForStrings(
                    AuthHeader authHeader, ResourceIdentifier datasetRid, Set<AliasedString> strings) {
                _runtime.clients().block(delegate.getForStrings(authHeader, datasetRid, strings));
            }

            @Override
            public String toString() {
                return "TestServiceBlocking{_endpointChannelFactory=" + _endpointChannelFactory + ", runtime="
                        + _runtime + '}';
            }
        };
    }

    /**
     * Creates an asynchronous/non-blocking client for a TestService service.
     */
    static TestServiceBlocking of(Channel _channel, ConjureRuntime _runtime) {
        if (_channel instanceof EndpointChannelFactory) {
            return of((EndpointChannelFactory) _channel, _runtime);
        }
        return of(
                new EndpointChannelFactory() {
                    @Override
                    public EndpointChannel endpoint(Endpoint endpoint) {
                        return _runtime.clients().bind(_channel, endpoint);
                    }
                },
                _runtime);
    }
}
