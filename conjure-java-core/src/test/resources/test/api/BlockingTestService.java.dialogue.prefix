package test.prefix.com.palantir.another;

import com.palantir.dialogue.BinaryRequestBody;
import com.palantir.ri.ResourceIdentifier;
import com.palantir.tokens.auth.AuthHeader;
import java.io.InputStream;
import java.lang.Deprecated;
import java.lang.String;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.Set;
import javax.annotation.Generated;
import test.prefix.com.palantir.product.AliasedString;
import test.prefix.com.palantir.product.CreateDatasetRequest;
import test.prefix.com.palantir.product.NestedAliasedBinary;
import test.prefix.com.palantir.product.datasets.BackingFileSystem;
import test.prefix.com.palantir.product.datasets.Dataset;

/** A Markdown description of the service. */
@Generated("com.palantir.conjure.java.services.dialogue.DialogueServiceGenerator")
public interface BlockingTestService {
    /** Returns a mapping from file system id to backing file system configuration. */
    Map<String, BackingFileSystem> getFileSystems(AuthHeader authHeader);

    Dataset createDataset(
            AuthHeader authHeader, String testHeaderArg, CreateDatasetRequest request);

    Optional<Dataset> getDataset(AuthHeader authHeader, ResourceIdentifier datasetRid);

    InputStream getRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    NestedAliasedBinary getAliasedRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    Optional<ByteBuffer> maybeGetRawData(AuthHeader authHeader, ResourceIdentifier datasetRid);

    AliasedString getAliasedString(AuthHeader authHeader, ResourceIdentifier datasetRid);

    void uploadRawData(AuthHeader authHeader, BinaryRequestBody input);

    void uploadAliasedRawData(AuthHeader authHeader, NestedAliasedBinary input);

    /** @param datasetRid A valid dataset resource identifier. */
    Set<String> getBranches(AuthHeader authHeader, ResourceIdentifier datasetRid);

    /**
     * Gets all branches of this dataset.
     *
     * @param datasetRid A valid dataset resource identifier.
     * @deprecated use getBranches instead
     */
    @Deprecated
    Set<String> getBranchesDeprecated(AuthHeader authHeader, ResourceIdentifier datasetRid);

    Optional<String> resolveBranch(
            AuthHeader authHeader, ResourceIdentifier datasetRid, String branch);

    Optional<String> testParam(AuthHeader authHeader, ResourceIdentifier datasetRid);

    int testQueryParams(
            AuthHeader authHeader,
            ResourceIdentifier something,
            ResourceIdentifier implicit,
            Optional<ResourceIdentifier> optionalMiddle,
            Set<String> setEnd,
            Optional<ResourceIdentifier> optionalEnd,
            String query);

    void testNoResponseQueryParams(
            AuthHeader authHeader,
            ResourceIdentifier something,
            ResourceIdentifier implicit,
            Optional<ResourceIdentifier> optionalMiddle,
            Set<String> setEnd,
            Optional<ResourceIdentifier> optionalEnd,
            String query);

    boolean testBoolean(AuthHeader authHeader);

    double testDouble(AuthHeader authHeader);

    int testInteger(AuthHeader authHeader);

    Optional<String> testPostOptional(AuthHeader authHeader, Optional<String> maybeString);

    void testOptionalIntegerAndDouble(
            AuthHeader authHeader, OptionalInt maybeInteger, OptionalDouble maybeDouble);

    void getForStrings(
            AuthHeader authHeader, ResourceIdentifier datasetRid, Set<AliasedString> strings);
}
