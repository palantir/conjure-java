package test.api;

import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.EndpointRegistry;
import com.palantir.conjure.java.undertow.lib.Service;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.tokens.auth.BearerToken;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.StatusCodes;
import java.io.IOException;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.UndertowServiceHandlerGenerator")
public final class CookieServiceEndpoints implements Service {
    private final CookieService delegate;

    private CookieServiceEndpoints(CookieService delegate) {
        this.delegate = delegate;
    }

    public static Service of(CookieService delegate) {
        return new CookieServiceEndpoints(delegate);
    }

    @Override
    public void register(UndertowRuntime runtime, EndpointRegistry registry) {
        new CookieServiceRegistrable(runtime, delegate).register(registry);
    }

    private static final class CookieServiceRegistrable {
        private final CookieService delegate;

        private final UndertowRuntime runtime;

        private CookieServiceRegistrable(UndertowRuntime runtime, CookieService delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
        }

        void register(EndpointRegistry registry) {
            registry.add(
                    Endpoint.get("/cookies", "CookieService", "eatCookies"),
                    new EatCookiesHandler());
        }

        private class EatCookiesHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                BearerToken cookieToken = runtime.auth().cookie(exchange, "PALANTIR_TOKEN");
                delegate.eatCookies(cookieToken);
                exchange.setStatusCode(StatusCodes.NO_CONTENT);
            }
        }
    }
}
