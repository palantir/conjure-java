package test.api;

import com.palantir.conjure.java.undertow.lib.BinaryResponseBody;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.EndpointRegistry;
import com.palantir.conjure.java.undertow.lib.Service;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import java.io.IOException;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.UndertowServiceHandlerGenerator")
public final class TestServiceEndpoints implements Service {
    private final TestService delegate;

    private TestServiceEndpoints(TestService delegate) {
        this.delegate = delegate;
    }

    public static Service of(TestService delegate) {
        return new TestServiceEndpoints(delegate);
    }

    @Override
    public void register(UndertowRuntime runtime, EndpointRegistry registry) {
        new TestServiceRegistrable(runtime, delegate).register(registry);
    }

    private static final class TestServiceRegistrable {
        private final TestService delegate;

        private final UndertowRuntime runtime;

        private TestServiceRegistrable(UndertowRuntime runtime, TestService delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
        }

        void register(EndpointRegistry registry) {
            registry.add(Endpoint.get("/", "TestService", "getBinary"), new GetBinaryHandler());
        }

        private class GetBinaryHandler implements HttpHandler {
            @Override
            public void handleRequest(HttpServerExchange exchange) throws IOException {
                BinaryResponseBody result = delegate.getBinary();
                runtime.serde().serialize(result, exchange);
            }
        }
    }
}
