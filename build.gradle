/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.gradle.jdks:gradle-jdks:0.22.0'
        classpath 'com.palantir.gradle.jdkslatest:gradle-jdks-latest:0.2.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.gradle.conjure:gradle-conjure:5.28.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.25.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.147.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.11.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.15.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
    }
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.baseline-java-versions'
apply plugin: 'com.palantir.jdks.latest'

javaVersions {
    libraryTarget = 11
    runtime = 17
}

allprojects {
    apply plugin: 'com.palantir.java-format'
    version System.env.CIRCLE_TAG ?: gitVersion()
    group 'com.palantir.conjure.java'

    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        maven { url 'https://jitpack.io' }
    }

    configurations.all {
        resolutionStrategy.preferProjectModules()
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.glassfish.hk2.external' && details.requested.name == 'javax.inject') {
                details.useTarget group: 'javax.inject', name: 'javax.inject', version: '1'
                details.because "The glassfish shaded copy is only necessary for OSGI environments, which we do not endorse."
            }
            if (details.requested.group == 'com.google.errorprone' && details.requested.name == 'error_prone_annotations') {
                details.useTarget group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.7.1'
                details.because "The error_prone_annotations dependency must be low to avoid forcing consumers to use newer releases"
            }
        }
    }

    configurations.configureEach {
        resolutionStrategy.dependencySubstitution {
            // javapoet hasn't merged contributions in a while. Specifically, I want:
            //  - records https://github.com/square/javapoet/pull/840
            //  - permits https://github.com/square/javapoet/issues/823
            // It appears that @liach has implemented both of these, and merged them to the javapoet fork https://github.com/FabricMC/javapoet.
            // I'm using jitpack.io to compile a jar of the specific commit (from master) of that fork.
            it.substitute it.module('com.squareup:javapoet') with it.module('com.github.FabricMC:javapoet:d9b7dba158')
        }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'com.palantir.baseline-class-uniqueness'

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Werror']
        options.errorprone.disable 'PreferSafeLoggingPreconditions', 'PreferSafeLoggableExceptions'
    }

    // Run `./gradlew test -Drecreate=true` to recreate all the expected
    // generated code that we have checked into the repo.
    tasks.withType(Test) {
        systemProperty 'recreate', System.getProperty('recreate', 'false')
    }
}

configurations {
    conjureJava
}

configurations.conjureJava.exclude group: 'com.palantir.conjure.java'

afterEvaluate {
    dependencies {
        conjureJava files(project(':conjure-java').tasks.distTar.archiveFile) {
            builtBy project(':conjure-java').tasks.distTar
        }
    }
}
