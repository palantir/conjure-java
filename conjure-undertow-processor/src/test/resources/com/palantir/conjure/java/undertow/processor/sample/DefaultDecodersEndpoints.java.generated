package com.palantir.conjure.java.undertow.processor.sample;

import com.google.common.collect.ImmutableList;
import com.palantir.conjure.java.undertow.annotations.DefaultSerDe;
import com.palantir.conjure.java.undertow.annotations.ParamDecoders;
import com.palantir.conjure.java.undertow.annotations.QueryParamDeserializer;
import com.palantir.conjure.java.undertow.lib.Deserializer;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.ReturnValueWriter;
import com.palantir.conjure.java.undertow.lib.Serializer;
import com.palantir.conjure.java.undertow.lib.TypeMarker;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.conjure.java.undertow.lib.UndertowService;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;
import io.undertow.util.Methods;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.processing.Generated;

@Generated("com.palantir.conjure.java.undertow.processor.generate.ConjureUndertowEndpointsGenerator")
public final class DefaultDecodersEndpoints implements UndertowService {
    private final DefaultDecoders delegate;

    private DefaultDecodersEndpoints(DefaultDecoders delegate) {
        this.delegate = delegate;
    }

    public static UndertowService of(DefaultDecoders delegate) {
        return new DefaultDecodersEndpoints(delegate);
    }

    @Override
    public List<Endpoint> endpoints(UndertowRuntime runtime) {
        return ImmutableList.of(new QueryParamEndpoint(runtime, delegate));
    }

    private static final class QueryParamEndpoint implements HttpHandler, Endpoint, ReturnValueWriter<String> {
        private final UndertowRuntime runtime;

        private final DefaultDecoders delegate;

        private final Serializer<String> queryParamSerializer;

        private final Deserializer<String> qParamDeserializer;

        private final Deserializer<Boolean> rParamDeserializer;

        private final Deserializer<List<Integer>> sParamsDeserializer;

        private final Deserializer<Optional<String>> tParamsDeserializer;

        private final Deserializer<String> uParamDeserializer;

        QueryParamEndpoint(UndertowRuntime runtime, DefaultDecoders delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.queryParamSerializer = DefaultSerDe.INSTANCE.serializer(new TypeMarker<String>() {}, runtime);
            this.qParamDeserializer = new QueryParamDeserializer<>(
                    "q", new ParamDecoders.OnlyElementCollectionParamDecoder<>(ParamDecoders.stringDecoder()));
            this.rParamDeserializer = new QueryParamDeserializer<>(
                    "r", new ParamDecoders.OnlyElementCollectionParamDecoder<>(ParamDecoders.booleanDecoder()));
            this.sParamsDeserializer = new QueryParamDeserializer<>(
                    "s", new ParamDecoders.AllElementsCollectionParamDecoder<>(ParamDecoders.integerDecoder()));
            this.tParamsDeserializer = new QueryParamDeserializer<>(
                    "t", new ParamDecoders.OptionalCollectionParamDecoder<>(ParamDecoders.stringDecoder()));
            this.uParamDeserializer =
                    new QueryParamDeserializer<>("u", DefaultDecoders.StringCollectionDecoder.INSTANCE);
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws Exception {
            write(
                    this.delegate.queryParam(
                            this.qParamDeserializer.deserialize(exchange),
                            this.rParamDeserializer.deserialize(exchange),
                            this.sParamsDeserializer.deserialize(exchange),
                            this.tParamsDeserializer.deserialize(exchange),
                            this.uParamDeserializer.deserialize(exchange)),
                    exchange);
        }

        @Override
        public void write(String returnValue, HttpServerExchange exchange) throws IOException {
            this.queryParamSerializer.serialize(returnValue, exchange);
        }

        @Override
        public HttpString method() {
            return Methods.GET;
        }

        @Override
        public String template() {
            return "/queryParam";
        }

        @Override
        public String serviceName() {
            return "DefaultDecoders";
        }

        @Override
        public String name() {
            return "queryParam";
        }

        @Override
        public HttpHandler handler() {
            return this;
        }
    }
}
