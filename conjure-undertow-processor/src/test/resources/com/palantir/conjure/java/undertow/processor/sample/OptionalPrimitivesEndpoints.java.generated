package com.palantir.conjure.java.undertow.processor.sample;

import com.google.common.collect.ImmutableList;
import com.palantir.conjure.java.undertow.annotations.ParamDecoders;
import com.palantir.conjure.java.undertow.annotations.QueryParamDeserializer;
import com.palantir.conjure.java.undertow.lib.Deserializer;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.conjure.java.undertow.lib.UndertowService;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;
import io.undertow.util.Methods;
import io.undertow.util.StatusCodes;
import java.lang.Double;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import javax.annotation.processing.Generated;

@Generated("com.palantir.conjure.java.undertow.processor.generate.ConjureUndertowEndpointsGenerator")
public final class OptionalPrimitivesEndpoints implements UndertowService {
    private final OptionalPrimitives delegate;

    private OptionalPrimitivesEndpoints(OptionalPrimitives delegate) {
        this.delegate = delegate;
    }

    public static UndertowService of(OptionalPrimitives delegate) {
        return new OptionalPrimitivesEndpoints(delegate);
    }

    @Override
    public List<Endpoint> endpoints(UndertowRuntime runtime) {
        return ImmutableList.of(new IntegersEndpoint(runtime, delegate), new DoublesEndpoint(runtime, delegate));
    }

    private static final class IntegersEndpoint implements HttpHandler, Endpoint {
        private final UndertowRuntime runtime;

        private final OptionalPrimitives delegate;

        private final Deserializer<OptionalInt> oneDeserializer;

        private final Deserializer<Optional<Integer>> twoDeserializer;

        IntegersEndpoint(UndertowRuntime runtime, OptionalPrimitives delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.oneDeserializer = new QueryParamDeserializer<>(
                    "one", ParamDecoders.optionalIntegerCollectionParamDecoder(runtime.plainSerDe()));
            this.twoDeserializer = new QueryParamDeserializer<>(
                    "two", ParamDecoders.optionalComplexCollectionParamDecoder(runtime.plainSerDe(), Integer::valueOf));
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws Exception {
            OptionalInt one = this.oneDeserializer.deserialize(exchange);
            Optional<Integer> two = this.twoDeserializer.deserialize(exchange);
            this.delegate.integers(one, two);
            exchange.setStatusCode(StatusCodes.NO_CONTENT);
        }

        @Override
        public HttpString method() {
            return Methods.GET;
        }

        @Override
        public String template() {
            return "/integer";
        }

        @Override
        public String serviceName() {
            return "OptionalPrimitives";
        }

        @Override
        public String name() {
            return "integers";
        }

        @Override
        public HttpHandler handler() {
            return this;
        }
    }

    private static final class DoublesEndpoint implements HttpHandler, Endpoint {
        private final UndertowRuntime runtime;

        private final OptionalPrimitives delegate;

        private final Deserializer<OptionalDouble> oneDeserializer;

        private final Deserializer<Optional<Double>> twoDeserializer;

        DoublesEndpoint(UndertowRuntime runtime, OptionalPrimitives delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
            this.oneDeserializer = new QueryParamDeserializer<>(
                    "one", ParamDecoders.optionalDoubleCollectionParamDecoder(runtime.plainSerDe()));
            this.twoDeserializer = new QueryParamDeserializer<>(
                    "two", ParamDecoders.optionalComplexCollectionParamDecoder(runtime.plainSerDe(), Double::valueOf));
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws Exception {
            OptionalDouble one = this.oneDeserializer.deserialize(exchange);
            Optional<Double> two = this.twoDeserializer.deserialize(exchange);
            this.delegate.doubles(one, two);
            exchange.setStatusCode(StatusCodes.NO_CONTENT);
        }

        @Override
        public HttpString method() {
            return Methods.GET;
        }

        @Override
        public String template() {
            return "/double";
        }

        @Override
        public String serviceName() {
            return "OptionalPrimitives";
        }

        @Override
        public String name() {
            return "doubles";
        }

        @Override
        public HttpHandler handler() {
            return this;
        }
    }
}
